package com.velebit.anippe.shared.notes;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractFormFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

import javax.annotation.Generated;
import java.util.List;
import java.util.Map;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "com.velebit.anippe.client.notes.AbstractSidebarNotesGroupBox", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public abstract class AbstractSidebarNotesGroupBoxData extends AbstractFormFieldData {
    private static final long serialVersionUID = 1L;

    public NotesTable getNotesTable() {
        return getFieldByClass(NotesTable.class);
    }

    /**
     * access method for property Related.
     */
    public Map<Integer, List<Integer>> getRelated() {
        return getRelatedProperty().getValue();
    }

    /**
     * access method for property Related.
     */
    public void setRelated(Map<Integer, List<Integer>> related) {
        getRelatedProperty().setValue(related);
    }

    public RelatedProperty getRelatedProperty() {
        return getPropertyByClass(RelatedProperty.class);
    }

    /**
     * access method for property RelatedId.
     */
    public Integer getRelatedId() {
        return getRelatedIdProperty().getValue();
    }

    /**
     * access method for property RelatedId.
     */
    public void setRelatedId(Integer relatedId) {
        getRelatedIdProperty().setValue(relatedId);
    }

    public RelatedIdProperty getRelatedIdProperty() {
        return getPropertyByClass(RelatedIdProperty.class);
    }

    /**
     * access method for property RelatedType.
     */
    public Integer getRelatedType() {
        return getRelatedTypeProperty().getValue();
    }

    /**
     * access method for property RelatedType.
     */
    public void setRelatedType(Integer relatedType) {
        getRelatedTypeProperty().setValue(relatedType);
    }

    public RelatedTypeProperty getRelatedTypeProperty() {
        return getPropertyByClass(RelatedTypeProperty.class);
    }

    /**
     * access method for property TemporaryNoteIds.
     */
    public List<Integer> getTemporaryNoteIds() {
        return getTemporaryNoteIdsProperty().getValue();
    }

    /**
     * access method for property TemporaryNoteIds.
     */
    public void setTemporaryNoteIds(List<Integer> temporaryNoteIds) {
        getTemporaryNoteIdsProperty().setValue(temporaryNoteIds);
    }

    public TemporaryNoteIdsProperty getTemporaryNoteIdsProperty() {
        return getPropertyByClass(TemporaryNoteIdsProperty.class);
    }

    public static class NotesTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public NotesTableRowData addRow() {
            return (NotesTableRowData) super.addRow();
        }

        @Override
        public NotesTableRowData addRow(int rowState) {
            return (NotesTableRowData) super.addRow(rowState);
        }

        @Override
        public NotesTableRowData createRow() {
            return new NotesTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return NotesTableRowData.class;
        }

        @Override
        public NotesTableRowData[] getRows() {
            return (NotesTableRowData[]) super.getRows();
        }

        @Override
        public NotesTableRowData rowAt(int index) {
            return (NotesTableRowData) super.rowAt(index);
        }

        public void setRows(NotesTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class NotesTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
            public static final String note = "note";
            private Note m_note;

            public Note getNote() {
                return m_note;
            }

            public void setNote(Note newNote) {
                m_note = newNote;
            }
        }
    }

    public static class RelatedIdProperty extends AbstractPropertyData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class RelatedProperty extends AbstractPropertyData<Map<Integer, List<Integer>>> {
        private static final long serialVersionUID = 1L;
    }

    public static class RelatedTypeProperty extends AbstractPropertyData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class TemporaryNoteIdsProperty extends AbstractPropertyData<List<Integer>> {
        private static final long serialVersionUID = 1L;
    }
}
