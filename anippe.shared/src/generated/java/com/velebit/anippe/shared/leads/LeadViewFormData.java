package com.velebit.anippe.shared.leads;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

import javax.annotation.Generated;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "com.velebit.anippe.client.leads.LeadViewForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class LeadViewFormData extends AbstractFormData {
    private static final long serialVersionUID = 1L;

    public ActivityTable getActivityTable() {
        return getFieldByClass(ActivityTable.class);
    }

    public DocumentsTable getDocumentsTable() {
        return getFieldByClass(DocumentsTable.class);
    }

    /**
     * access method for property LeadId.
     */
    public Integer getLeadId() {
        return getLeadIdProperty().getValue();
    }

    /**
     * access method for property LeadId.
     */
    public void setLeadId(Integer leadId) {
        getLeadIdProperty().setValue(leadId);
    }

    public LeadIdProperty getLeadIdProperty() {
        return getPropertyByClass(LeadIdProperty.class);
    }

    public Tasks getTasks() {
        return getFieldByClass(Tasks.class);
    }

    public static class ActivityTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public ActivityTableRowData addRow() {
            return (ActivityTableRowData) super.addRow();
        }

        @Override
        public ActivityTableRowData addRow(int rowState) {
            return (ActivityTableRowData) super.addRow(rowState);
        }

        @Override
        public ActivityTableRowData createRow() {
            return new ActivityTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return ActivityTableRowData.class;
        }

        @Override
        public ActivityTableRowData[] getRows() {
            return (ActivityTableRowData[]) super.getRows();
        }

        @Override
        public ActivityTableRowData rowAt(int index) {
            return (ActivityTableRowData) super.rowAt(index);
        }

        public void setRows(ActivityTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class ActivityTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
        }
    }

    public static class DocumentsTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public DocumentsTableRowData addRow() {
            return (DocumentsTableRowData) super.addRow();
        }

        @Override
        public DocumentsTableRowData addRow(int rowState) {
            return (DocumentsTableRowData) super.addRow(rowState);
        }

        @Override
        public DocumentsTableRowData createRow() {
            return new DocumentsTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return DocumentsTableRowData.class;
        }

        @Override
        public DocumentsTableRowData[] getRows() {
            return (DocumentsTableRowData[]) super.getRows();
        }

        @Override
        public DocumentsTableRowData rowAt(int index) {
            return (DocumentsTableRowData) super.rowAt(index);
        }

        public void setRows(DocumentsTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class DocumentsTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
        }
    }

    public static class LeadIdProperty extends AbstractPropertyData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class Tasks extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public TasksRowData addRow() {
            return (TasksRowData) super.addRow();
        }

        @Override
        public TasksRowData addRow(int rowState) {
            return (TasksRowData) super.addRow(rowState);
        }

        @Override
        public TasksRowData createRow() {
            return new TasksRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return TasksRowData.class;
        }

        @Override
        public TasksRowData[] getRows() {
            return (TasksRowData[]) super.getRows();
        }

        @Override
        public TasksRowData rowAt(int index) {
            return (TasksRowData) super.rowAt(index);
        }

        public void setRows(TasksRowData[] rows) {
            super.setRows(rows);
        }

        public static class TasksRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
        }
    }
}
