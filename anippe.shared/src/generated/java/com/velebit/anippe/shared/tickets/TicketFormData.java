package com.velebit.anippe.shared.tickets;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

import javax.annotation.Generated;
import java.util.Date;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "com.velebit.anippe.client.tickets.TicketForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class TicketFormData extends AbstractFormData {
    private static final long serialVersionUID = 1L;

    public AssignedTo getAssignedTo() {
        return getFieldByClass(AssignedTo.class);
    }

    public CC getCC() {
        return getFieldByClass(CC.class);
    }

    public ChangeStatus getChangeStatus() {
        return getFieldByClass(ChangeStatus.class);
    }

    public Contact getContact() {
        return getFieldByClass(Contact.class);
    }

    public KnowledgeBaseArticle getKnowledgeBaseArticle() {
        return getFieldByClass(KnowledgeBaseArticle.class);
    }

    public NotesTable getNotesTable() {
        return getFieldByClass(NotesTable.class);
    }

    public OtherTicketsTable getOtherTicketsTable() {
        return getFieldByClass(OtherTicketsTable.class);
    }

    public PredefinedReply getPredefinedReply() {
        return getFieldByClass(PredefinedReply.class);
    }

    public Priority getPriority() {
        return getFieldByClass(Priority.class);
    }

    /**
     * access method for property ProjectId.
     */
    public Integer getProjectId() {
        return getProjectIdProperty().getValue();
    }

    /**
     * access method for property ProjectId.
     */
    public void setProjectId(Integer projectId) {
        getProjectIdProperty().setValue(projectId);
    }

    public ProjectIdProperty getProjectIdProperty() {
        return getPropertyByClass(ProjectIdProperty.class);
    }

    public RemindersTable getRemindersTable() {
        return getFieldByClass(RemindersTable.class);
    }

    public RepliesTable getRepliesTable() {
        return getFieldByClass(RepliesTable.class);
    }

    public Reply getReply() {
        return getFieldByClass(Reply.class);
    }

    public Status getStatus() {
        return getFieldByClass(Status.class);
    }

    public Subject getSubject() {
        return getFieldByClass(Subject.class);
    }

    public TasksTable getTasksTable() {
        return getFieldByClass(TasksTable.class);
    }

    /**
     * access method for property TicketId.
     */
    public Integer getTicketId() {
        return getTicketIdProperty().getValue();
    }

    /**
     * access method for property TicketId.
     */
    public void setTicketId(Integer ticketId) {
        getTicketIdProperty().setValue(ticketId);
    }

    public TicketIdProperty getTicketIdProperty() {
        return getPropertyByClass(TicketIdProperty.class);
    }

    public TicketTitleLabel getTicketTitleLabel() {
        return getFieldByClass(TicketTitleLabel.class);
    }

    public static class AssignedTo extends AbstractValueFieldData<Long> {
        private static final long serialVersionUID = 1L;
    }

    public static class CC extends AbstractValueFieldData<String> {
        private static final long serialVersionUID = 1L;
    }

    public static class ChangeStatus extends AbstractValueFieldData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class Contact extends AbstractValueFieldData<Long> {
        private static final long serialVersionUID = 1L;
    }

    public static class KnowledgeBaseArticle extends AbstractValueFieldData<Long> {
        private static final long serialVersionUID = 1L;
    }

    public static class NotesTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public NotesTableRowData addRow() {
            return (NotesTableRowData) super.addRow();
        }

        @Override
        public NotesTableRowData addRow(int rowState) {
            return (NotesTableRowData) super.addRow(rowState);
        }

        @Override
        public NotesTableRowData createRow() {
            return new NotesTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return NotesTableRowData.class;
        }

        @Override
        public NotesTableRowData[] getRows() {
            return (NotesTableRowData[]) super.getRows();
        }

        @Override
        public NotesTableRowData rowAt(int index) {
            return (NotesTableRowData) super.rowAt(index);
        }

        public void setRows(NotesTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class NotesTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
            public static final String noteId = "noteId";
            public static final String user = "user";
            public static final String createdAt = "createdAt";
            public static final String note = "note";
            private Integer m_noteId;
            private String m_user;
            private Date m_createdAt;
            private String m_note;

            public Integer getNoteId() {
                return m_noteId;
            }

            public void setNoteId(Integer newNoteId) {
                m_noteId = newNoteId;
            }

            public String getUser() {
                return m_user;
            }

            public void setUser(String newUser) {
                m_user = newUser;
            }

            public Date getCreatedAt() {
                return m_createdAt;
            }

            public void setCreatedAt(Date newCreatedAt) {
                m_createdAt = newCreatedAt;
            }

            public String getNote() {
                return m_note;
            }

            public void setNote(String newNote) {
                m_note = newNote;
            }
        }
    }

    public static class OtherTicketsTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public OtherTicketsTableRowData addRow() {
            return (OtherTicketsTableRowData) super.addRow();
        }

        @Override
        public OtherTicketsTableRowData addRow(int rowState) {
            return (OtherTicketsTableRowData) super.addRow(rowState);
        }

        @Override
        public OtherTicketsTableRowData createRow() {
            return new OtherTicketsTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return OtherTicketsTableRowData.class;
        }

        @Override
        public OtherTicketsTableRowData[] getRows() {
            return (OtherTicketsTableRowData[]) super.getRows();
        }

        @Override
        public OtherTicketsTableRowData rowAt(int index) {
            return (OtherTicketsTableRowData) super.rowAt(index);
        }

        public void setRows(OtherTicketsTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class OtherTicketsTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
            public static final String ticket = "ticket";
            public static final String subject = "subject";
            public static final String createdAt = "createdAt";
            public static final String contact = "contact";
            public static final String status = "status";
            public static final String priority = "priority";
            public static final String lastReply = "lastReply";
            private Ticket m_ticket;
            private String m_subject;
            private Date m_createdAt;
            private String m_contact;
            private Integer m_status;
            private Integer m_priority;
            private Date m_lastReply;

            public Ticket getTicket() {
                return m_ticket;
            }

            public void setTicket(Ticket newTicket) {
                m_ticket = newTicket;
            }

            public String getSubject() {
                return m_subject;
            }

            public void setSubject(String newSubject) {
                m_subject = newSubject;
            }

            public Date getCreatedAt() {
                return m_createdAt;
            }

            public void setCreatedAt(Date newCreatedAt) {
                m_createdAt = newCreatedAt;
            }

            public String getContact() {
                return m_contact;
            }

            public void setContact(String newContact) {
                m_contact = newContact;
            }

            public Integer getStatus() {
                return m_status;
            }

            public void setStatus(Integer newStatus) {
                m_status = newStatus;
            }

            public Integer getPriority() {
                return m_priority;
            }

            public void setPriority(Integer newPriority) {
                m_priority = newPriority;
            }

            public Date getLastReply() {
                return m_lastReply;
            }

            public void setLastReply(Date newLastReply) {
                m_lastReply = newLastReply;
            }
        }
    }

    public static class PredefinedReply extends AbstractValueFieldData<Long> {
        private static final long serialVersionUID = 1L;
    }

    public static class Priority extends AbstractValueFieldData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class ProjectIdProperty extends AbstractPropertyData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class RemindersTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public RemindersTableRowData addRow() {
            return (RemindersTableRowData) super.addRow();
        }

        @Override
        public RemindersTableRowData addRow(int rowState) {
            return (RemindersTableRowData) super.addRow(rowState);
        }

        @Override
        public RemindersTableRowData createRow() {
            return new RemindersTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return RemindersTableRowData.class;
        }

        @Override
        public RemindersTableRowData[] getRows() {
            return (RemindersTableRowData[]) super.getRows();
        }

        @Override
        public RemindersTableRowData rowAt(int index) {
            return (RemindersTableRowData) super.rowAt(index);
        }

        public void setRows(RemindersTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class RemindersTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
        }
    }

    public static class RepliesTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public RepliesTableRowData addRow() {
            return (RepliesTableRowData) super.addRow();
        }

        @Override
        public RepliesTableRowData addRow(int rowState) {
            return (RepliesTableRowData) super.addRow(rowState);
        }

        @Override
        public RepliesTableRowData createRow() {
            return new RepliesTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return RepliesTableRowData.class;
        }

        @Override
        public RepliesTableRowData[] getRows() {
            return (RepliesTableRowData[]) super.getRows();
        }

        @Override
        public RepliesTableRowData rowAt(int index) {
            return (RepliesTableRowData) super.rowAt(index);
        }

        public void setRows(RepliesTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class RepliesTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
            public static final String ticketReply = "ticketReply";
            public static final String informations = "informations";
            public static final String reply = "reply";
            private TicketReply m_ticketReply;
            private String m_informations;
            private String m_reply;

            public TicketReply getTicketReply() {
                return m_ticketReply;
            }

            public void setTicketReply(TicketReply newTicketReply) {
                m_ticketReply = newTicketReply;
            }

            public String getInformations() {
                return m_informations;
            }

            public void setInformations(String newInformations) {
                m_informations = newInformations;
            }

            public String getReply() {
                return m_reply;
            }

            public void setReply(String newReply) {
                m_reply = newReply;
            }
        }
    }

    public static class Reply extends AbstractValueFieldData<String> {
        private static final long serialVersionUID = 1L;
    }

    public static class Status extends AbstractValueFieldData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class Subject extends AbstractValueFieldData<String> {
        private static final long serialVersionUID = 1L;
    }

    public static class TasksTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public TasksTableRowData addRow() {
            return (TasksTableRowData) super.addRow();
        }

        @Override
        public TasksTableRowData addRow(int rowState) {
            return (TasksTableRowData) super.addRow(rowState);
        }

        @Override
        public TasksTableRowData createRow() {
            return new TasksTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return TasksTableRowData.class;
        }

        @Override
        public TasksTableRowData[] getRows() {
            return (TasksTableRowData[]) super.getRows();
        }

        @Override
        public TasksTableRowData rowAt(int index) {
            return (TasksTableRowData) super.rowAt(index);
        }

        public void setRows(TasksTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class TasksTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
        }
    }

    public static class TicketIdProperty extends AbstractPropertyData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class TicketTitleLabel extends AbstractValueFieldData<String> {
        private static final long serialVersionUID = 1L;
    }
}
