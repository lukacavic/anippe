package com.velebit.anippe.shared.tasks;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

import javax.annotation.Generated;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "com.velebit.anippe.client.tasks.TaskViewForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class TaskViewFormData extends AbstractFormData {
    private static final long serialVersionUID = 1L;

    public Comment getComment() {
        return getFieldByClass(Comment.class);
    }

    public Description getDescription() {
        return getFieldByClass(Description.class);
    }

    public FollowersTable getFollowersTable() {
        return getFieldByClass(FollowersTable.class);
    }

    public RemindersTable getRemindersTable() {
        return getFieldByClass(RemindersTable.class);
    }

    public SubTasksTable getSubTasksTable() {
        return getFieldByClass(SubTasksTable.class);
    }

    /**
     * access method for property Task.
     */
    public Task getTask() {
        return getTaskProperty().getValue();
    }

    /**
     * access method for property Task.
     */
    public void setTask(Task task) {
        getTaskProperty().setValue(task);
    }

    public TaskProperty getTaskProperty() {
        return getPropertyByClass(TaskProperty.class);
    }

    /**
     * access method for property TaskId.
     */
    public Integer getTaskId() {
        return getTaskIdProperty().getValue();
    }

    /**
     * access method for property TaskId.
     */
    public void setTaskId(Integer taskId) {
        getTaskIdProperty().setValue(taskId);
    }

    public TaskIdProperty getTaskIdProperty() {
        return getPropertyByClass(TaskIdProperty.class);
    }

    public static class Comment extends AbstractValueFieldData<String> {
        private static final long serialVersionUID = 1L;
    }

    public static class Description extends AbstractValueFieldData<String> {
        private static final long serialVersionUID = 1L;
    }

    public static class FollowersTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public FollowersTableRowData addRow() {
            return (FollowersTableRowData) super.addRow();
        }

        @Override
        public FollowersTableRowData addRow(int rowState) {
            return (FollowersTableRowData) super.addRow(rowState);
        }

        @Override
        public FollowersTableRowData createRow() {
            return new FollowersTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return FollowersTableRowData.class;
        }

        @Override
        public FollowersTableRowData[] getRows() {
            return (FollowersTableRowData[]) super.getRows();
        }

        @Override
        public FollowersTableRowData rowAt(int index) {
            return (FollowersTableRowData) super.rowAt(index);
        }

        public void setRows(FollowersTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class FollowersTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
        }
    }

    public static class RemindersTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public RemindersTableRowData addRow() {
            return (RemindersTableRowData) super.addRow();
        }

        @Override
        public RemindersTableRowData addRow(int rowState) {
            return (RemindersTableRowData) super.addRow(rowState);
        }

        @Override
        public RemindersTableRowData createRow() {
            return new RemindersTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return RemindersTableRowData.class;
        }

        @Override
        public RemindersTableRowData[] getRows() {
            return (RemindersTableRowData[]) super.getRows();
        }

        @Override
        public RemindersTableRowData rowAt(int index) {
            return (RemindersTableRowData) super.rowAt(index);
        }

        public void setRows(RemindersTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class RemindersTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
        }
    }

    public static class SubTasksTable extends AbstractTableFieldBeanData {
        private static final long serialVersionUID = 1L;

        @Override
        public SubTasksTableRowData addRow() {
            return (SubTasksTableRowData) super.addRow();
        }

        @Override
        public SubTasksTableRowData addRow(int rowState) {
            return (SubTasksTableRowData) super.addRow(rowState);
        }

        @Override
        public SubTasksTableRowData createRow() {
            return new SubTasksTableRowData();
        }

        @Override
        public Class<? extends AbstractTableRowData> getRowType() {
            return SubTasksTableRowData.class;
        }

        @Override
        public SubTasksTableRowData[] getRows() {
            return (SubTasksTableRowData[]) super.getRows();
        }

        @Override
        public SubTasksTableRowData rowAt(int index) {
            return (SubTasksTableRowData) super.rowAt(index);
        }

        public void setRows(SubTasksTableRowData[] rows) {
            super.setRows(rows);
        }

        public static class SubTasksTableRowData extends AbstractTableRowData {
            private static final long serialVersionUID = 1L;
            public static final String completed = "completed";
            public static final String task = "task";
            private Boolean m_completed;
            private String m_task;

            public Boolean getCompleted() {
                return m_completed;
            }

            public void setCompleted(Boolean newCompleted) {
                m_completed = newCompleted;
            }

            public String getTask() {
                return m_task;
            }

            public void setTask(String newTask) {
                m_task = newTask;
            }
        }
    }

    public static class TaskIdProperty extends AbstractPropertyData<Integer> {
        private static final long serialVersionUID = 1L;
    }

    public static class TaskProperty extends AbstractPropertyData<Task> {
        private static final long serialVersionUID = 1L;
    }
}
